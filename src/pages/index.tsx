import Head from "next/head";
import { useState } from "react";

type embeddingsItem = {
  description: string;
  embedding: number[];
  lines: string[];
  link: string;
  country: string;
  location: string;
  "tv-host": string;
  scene: number;
  score: number;
  secondsEnd: number;
  secondsStart: number;
  timecodeEnd: string;
  timecodeStart: string;
  videoFileName: string;
  date?: string;
};

const getEmbeddingsApi = async (
  data: string,
  setLoading: (boolean: boolean) => void
) => {
  setLoading(true);
  const res = await fetch("/api/embeddingApi", {
    method: "POST",
    headers: {
      Accept: "application/json, text/plain, */*",
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });

  if (res.status === 200) {
    console.log("Response succeeded!");
    setLoading(false);

    return res.json();
  } else {
    setLoading(false);
    return;
  }
};

export default function OpReis() {
  const [question, setQuestion] = useState<string>("");
  const [loading, setLoading] = useState(false);

  const [responeEmbedding, setResponseEmbedding] = useState<
    Array<embeddingsItem>
  >([]);

  const onSubmit = async (e) => {
    e.preventDefault();
    const responsObj = await getEmbeddingsApi(question, setLoading);
    if (responsObj) {
      console.log(responsObj);
      setResponseEmbedding(responsObj);
    }
  };

  return (
    <>
      <Head>
        <title>3 Op Reis Zoekmachine</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link
          rel="icon"
          href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üó∫</text></svg>"
        />
      </Head>
      <main className="homepage__main">
        <div>
          <h1 className="logo-icon">
            <img
              src="/globe-showing-europe-africa_1f30d.png"
              alt=""
              srcset=""
            />
          </h1>
          <h1 className="title-text">
            <span>GPT-</span>3 op Reis <br />
            Zoekmachine
          </h1>
          <form className="search-field__form">
            <input
              placeholder="Waar ben je naar opzoek?"
              className="search-field__input"
              type="text"
              value={question}
              onKeyDown={(e) => {
                if (e.key == "Enter" && !e.shiftKey && e.currentTarget.value) {
                  onSubmit(e);
                }
              }}
              onChange={(e) => {
                setQuestion(e.currentTarget.value);
              }}
            />
            <div className="search-field__butten-container">
              <button
                className="search-field__butten"
                type="button"
                onClick={(e) => {
                  onSubmit(e);
                }}
              >
                üïµ
              </button>
            </div>
          </form>
          <div className="clip-list">
            {loading ? (
              <div className="loading-container">
                <span className="dot">.</span>
                <span className="dot">.</span>
                <span className="dot">.</span>
              </div>
            ) : responeEmbedding.length < 1 ? (
              <div className="clip-card--no-results">
                <p> Geen afleveringen gevonden</p>
                <p>-</p>
                <p>
                  Het helpt om hele zinnen te maken. <br /> Een reis door .....
                </p>
              </div>
            ) : (
              responeEmbedding.map((element: embeddingsItem, i: number) => (
                <a
                  key={i}
                  href={
                    element.link +
                    "?&_________________________________>" +
                    element.timecodeStart
                  }
                  className="clip-card"
                  target="_blank"
                  rel="noreferrer"
                >
                  <p className="clip-card__description">
                    {element.description}
                  </p>
                  <div className="meta-data">
                    <p className="meta-data__title">Tijdcode in Aflevering: </p>
                    <p className="meta-data__entry">{element.timecodeStart}</p>
                    <p className="meta-data__title">Land:</p>
                    <p className="meta-data__entry">{element.country}</p>

                    <p className="meta-data__title">locatie:</p>
                    <p className="meta-data__entry">{element.location}</p>
                    <p className="meta-data__title">Presentator:</p>
                    <p className="meta-data__entry">{element["tv-host"]}</p>

                    <p className="meta-data__title"> Aflevering:</p>
                    <p className="meta-data__entry">{element.date}</p>

                    <p className="meta-data__title">Match:</p>
                    <p className="meta-data__entry">
                      {Math.round(element.score * 100)}%
                    </p>

                    <p className="chain">üîó</p>
                  </div>
                </a>
              ))
            )}
          </div>
        </div>
        <p className="credits">üèóÔ∏è Stijn Aa üèóÔ∏è</p>
      </main>
    </>
  );
}
